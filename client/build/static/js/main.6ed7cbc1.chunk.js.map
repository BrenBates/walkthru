{"version":3,"sources":["context/auth.js","PrivateRoute.js","pages/Home.js","components/MapContainer/index.js","pages/Landing/Landing.js","components/Comment.js","pages/HouseDetail/HouseDetail.js","pages/UserProfile/UserProfile.js","components/AuthForm.js","pages/Login.js","pages/Signup.js","pages/Navbar/Navbar.js","pages/NewHouseForm.js","pages/NoMatch.js","App.js","serviceWorker.js","index.js","img/walkthru.JPG"],"names":["AuthContext","createContext","useAuth","useContext","PrivateRoute","Component","component","rest","authTokens","render","props","to","pathname","state","referer","location","Home","mapStyles","width","height","MapContainer","displayMarkers","mapInfo","map","store","index","key","id","position","lat","lng","long","onClick","clickHouse","_id","google","this","zoom","style","initialCenter","React","GoogleApiWrapper","apiKey","Landing","useState","setMapInfo","currentHouse","setCurrentHouse","houseSelected","setHouseSelected","MyTextInput","label","useField","field","meta","htmlFor","name","className","touched","error","useEffect","axios","get","then","result","data","Container","Row","Col","xs","initialValues","street","city","st","validationSchema","Yup","max","required","onSubmit","values","setSubmitting","console","log","type","placeholder","md","houseID","house","filter","item","headline","src","houseImageURL","alt","Comment","Card","image","text","HouseDetail","houseURL","setHouseURL","houseInfoReceived","setHouseInfoReceived","setHouseID","setHouseImageURL","houseHeadline","setHouseHeadline","houseStreet","setHouseStreet","houseCity","setHouseCity","houseState","setHouseState","houseZip","setHouseZip","houseForRent","setHouseForRent","houseForSale","setHouseForSale","comments","setComments","commentsReceived","setCommentsReceived","newCommentSubmitted","setNewCommentSubmitted","match","params","loadComments","res","zip","forRent","forSale","queryURL","CardImg","top","CardBody","CardTitle","CardSubtitle","CardText","Consumer","authValue","comment","min","userName","username","userImage","post","renderHouseInfo","renderComments","UserProfile","picURL","url","imgURL","put","user","styled","div","Logo","input","button","img","Error","Login","isLoggedIn","setLoggedIn","isError","setIsError","errorText","setErrorText","setAuthTokens","logoImg","email","password","status","catch","e","Signup","repassword","NavbarPage","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","tag","Link","logOut","NavbarText","NewHouseForm","ZIP","NoMatch","role","aria-label","App","localStorage","getItem","Provider","value","setItem","JSON","stringify","exact","path","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6ed7cbc1.chunk.js","sourcesContent":["import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}","import React from \"react\";\r\n//import axios from 'axios';\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth } from \"./context/auth\";\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n  const { authTokens } = useAuth();\r\n  \r\n  // const validateToken = token => {\r\n\r\n  //   axios.get(\"/api/users/validatetoken\", token)\r\n    \r\n  //   console.log(token)\r\n  //   if(token) {\r\n  //     return true;\r\n  //   } else {\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        authTokens ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect \r\n          to={{ pathname: \"/login\", state: { referer: props.location}}} \r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;","import React from \"react\";\r\n\r\nfunction Home(props) {\r\n    return <div>Home Page\r\n    </div>;\r\n}\r\n\r\n\r\nexport default Home;","import React from \"react\";\r\nimport { Map, GoogleApiWrapper, Marker} from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n  width: '90%',\r\n  height: '400px',\r\n};\r\n\r\nexport class MapContainer extends React.Component {\r\n\r\n    displayMarkers = () => {\r\n      return this.props.mapInfo.map((store, index) => {\r\n        return <Marker key={index} id={index} position={{\r\n         lat: store.lat,\r\n         lng: store.long\r\n       }}\r\n       onClick={() => {\r\n        //Run the click function back on the landing page to load the clicked house information\r\n        this.props.clickHouse(store._id)\r\n      }\r\n      \r\n      } />\r\n\r\n      \r\n\r\n      })\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n          <Map\r\n            google={this.props.google}\r\n            zoom={8}\r\n            style={mapStyles}\r\n            initialCenter={{ lat: 40.759, lng: -111.876}}\r\n          >\r\n            {this.displayMarkers()}\r\n          </Map>\r\n      );\r\n    }\r\n  }\r\n    \r\n    export default GoogleApiWrapper({\r\n        apiKey: 'AIzaSyAMNknoCxB5QgbbRHfRWwB05nWZgRkjwp4'\r\n      })(MapContainer);\r\n\r\n   ","import React, { useState, useEffect } from \"react\";\r\nimport {  Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport '../Landing/landing.css'\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form, useField } from \"formik\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col\r\n} from 'reactstrap';\r\nimport MapContainer from \"../../components/MapContainer\"\r\n\r\n\r\n\r\n\r\nfunction Landing(props) {\r\n  \r\n  const [mapInfo, setMapInfo] = useState([]);\r\n  const [currentHouse, setCurrentHouse] = useState({});\r\n  const [houseSelected, setHouseSelected] = useState(false);\r\n\r\n  //Text input for Formik form.\r\n  const MyTextInput = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <>\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n        <input className=\"text-input\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"error\">{meta.error}</div>\r\n        ) : null}\r\n      </>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  function loadMap() {\r\n\r\n\r\n    axios.get(\"/api/houses/\", {\r\n\r\n  })\r\n  .then(result => {\r\n    \r\n    setMapInfo(result.data)\r\n\r\n  });\r\n  }\r\n\r\n  //handle click function for when a user clicks on a marker on the Google Map API.\r\n\r\n  const handleClick = houseID => {\r\n    \r\n    //filter the mapInfo array to isolate the house that was clicked\r\n    let house = mapInfo.filter(item => {\r\n      if(item._id === houseID) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n\r\n    })\r\n\r\n\r\n    //set the selected house into the state\r\n    setCurrentHouse(house[0]);\r\n    //toggle the flag that the house is selected.\r\n    setHouseSelected(true);\r\n\r\n  }\r\n\r\n  //Use Effect hook to load the google map upon component mount.\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    loadMap();\r\n  },[]);\r\n\r\n  //Conditional rendering for when the user clicks on a marker on the Google Maps API.\r\n\r\n  const renderHouse = () => {\r\n  if (houseSelected) { \r\n    return ( \r\n      <div>\r\n        <Link to={\"/api/houses/\"+currentHouse._id}>Go to House</Link>\r\n        <p>{currentHouse.headline}</p>\r\n        <p>{currentHouse.street}</p>\r\n        <p>{currentHouse.city}</p>\r\n        <p>{currentHouse.state}</p>\r\n        <img className=\"landingImg\" src={currentHouse.houseImageURL} alt=\"house\"></img>\r\n      </div>\r\n      ) \r\n  } else {\r\n    return <p></p>\r\n  }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <Container>\r\n    \r\n        <Row>\r\n          <Col xs=\"12\">\r\n\r\n          {/* In this first row adding a search form for users to determine if a property exists yet or not. */}\r\n          \r\n\r\n            <Formik\r\n      initialValues={{\r\n        street: \"\",\r\n        city: \"\",\r\n        st: \"\"\r\n      }}\r\n      validationSchema={Yup.object({\r\n        street: Yup.string()\r\n          .max(25, \"Must be 25 characters or less\")\r\n          .required(\"Required\"),\r\n        city: Yup.string()\r\n          .max(20,\"Must be 20 characters or less\")\r\n          .required(\"Required\"),\r\n        st: Yup.string()\r\n          .max(15, \"Must be 15 characters or less\")\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        // setTimeout(() => {\r\n        //   alert(JSON.stringify(values, null, 2));\r\n        //   setSubmitting(false);  \r\n        // }, 400);\r\n            console.log('submit button hit')\r\n\r\n\r\n      }}\r\n      >\r\n        {/* splitting the form up into sub columns so it doesn't take up too much vertical space. */}\r\n            <Form className=\"landSrchHouseFrm\">\r\n              <Row>\r\n\r\n              {/* <Col xs=\"4\">\r\n                <div className=\"landSrchHouseDiv\"> \r\n                <p>Search for a house:</p>\r\n                <button className=\"landSrchHouseBtn\" type=\"submit\">Submit</button>\r\n                </div>\r\n              </Col> */}\r\n\r\n                <Col xs=\"5\">\r\n                  <MyTextInput\r\n                      className=\"landSrchInput\"\r\n                      // label=\"Street\"\r\n                      name=\"street\"\r\n                      type=\"text\"\r\n                      placeholder=\"123 N 456 W\"\r\n                  />\r\n               </Col>\r\n\r\n               <Col xs=\"4\">\r\n                <MyTextInput\r\n                    className=\"landSrchInput\"\r\n                    // label=\"City\"\r\n                    name=\"city\"\r\n                    type=\"text\"\r\n                    placeholder=\"City\"\r\n                />\r\n              </Col>\r\n              \r\n              <Col xs=\"3\">\r\n                <MyTextInput\r\n                    className=\"landSrchInput\"\r\n                    // label=\"State\"\r\n                    name=\"st\"\r\n                    type=\"text\"\r\n                    placeholder=\"State\"\r\n                />\r\n              </Col>\r\n\r\n              </Row>\r\n              <Row>\r\n                <Col xs=\"6\" md=\"3\">\r\n                <p>Search for a house:</p>\r\n                </Col>\r\n                <Col xs=\"2\">\r\n                <button className=\"landSrchHouseBtn\" type=\"submit\">Submit</button>\r\n                </Col>\r\n              </Row>\r\n        \r\n        </Form>\r\n       </Formik>\r\n\r\n\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col xs=\"6\">\r\n            <MapContainer mapInfo = {mapInfo} clickHouse={handleClick}/>     \r\n          </Col>\r\n          <Col xs=\"6\">\r\n            \r\n            <p>Selected House:</p>\r\n            {renderHouse()}\r\n           \r\n          </Col>\r\n        </Row>\r\n\r\n    </Container>\r\n\r\n\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {\r\n  Row, Col, Card\r\n} from 'reactstrap';\r\n\r\nexport class Comment extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n\r\n        <div>\r\n\r\n        <Card>\r\n          <Row>\r\n            <Col xs=\"6\">\r\n              <Row>\r\n                  <Col xs=\"6\">\r\n                    {this.props.name}\r\n                  </Col>\r\n                  <Col xs=\"6\">\r\n                    <img alt=\"user\" src={this.props.image}></img>\r\n                  </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col xs=\"6\">\r\n                <p className=\"commentText\">{this.props.text}</p>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n}\r\n  \r\n  export default Comment;\r\n\r\n","import React, { useState, useEffect} from \"react\";\r\nimport axios from 'axios';\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form, useField } from \"formik\";\r\nimport '../HouseDetail/housedetail.css'\r\n// import { useAuth } from \"../../context/auth\";\r\nimport {\r\n  Container, Row, Col, Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle\r\n} from 'reactstrap';\r\nimport Comment from \"../../components/Comment\"\r\nimport { AuthContext } from \"../../context/auth\";\r\n\r\nfunction HouseDetail(props) {\r\n\r\n  //Text input for Formik form.\r\n  const MyTextInput = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <>\r\n       \r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n        <input className=\"text-input\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"error\">{meta.error}</div>\r\n        ) : null}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const [houseURL, setHouseURL] = useState('')\r\n  const [houseInfoReceived, setHouseInfoReceived] = useState(false)\r\n  const [houseID, setHouseID] = useState('')\r\n  const [houseImageURL, setHouseImageURL] = useState('')\r\n  const [houseHeadline, setHouseHeadline] = useState('')\r\n  const [houseStreet, setHouseStreet] = useState('')\r\n  const [houseCity, setHouseCity] = useState('')\r\n  const [houseState, setHouseState] = useState('')\r\n  const [houseZip, setHouseZip] = useState('')\r\n  const [houseForRent, setHouseForRent] = useState(false)\r\n  const [houseForSale, setHouseForSale] = useState(true)\r\n  const [comments, setComments] = useState([])\r\n  const [commentsReceived, setCommentsReceived] = useState(false)\r\n  const [newCommentSubmitted, setNewCommentSubmitted] = useState(0)\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    // When component mounts, load the house id from the props.params into the state.\r\n    setHouseURL('/api/houses/' + props.match.params.id)\r\n    // Also, when the component mounts, send an axios get call with the house ID to get the comments.\r\n    loadComments(props.match.params.id)\r\n\r\n  }, [props.match.params.id]);\r\n\r\n  useEffect(() => {\r\n\r\n    const populateHouseInfo = () => {\r\n\r\n      axios.get(houseURL).then((res) => {\r\n  \r\n        const data = res.data;\r\n        setHouseID(data._id);\r\n        setHouseHeadline(data.headline);\r\n        setHouseImageURL(data.houseImageURL);\r\n        setHouseStreet(data.street);\r\n        setHouseCity(data.city);\r\n        setHouseState(data.state);\r\n        setHouseZip(data.zip);\r\n        setHouseForRent(data.forRent);\r\n        setHouseForSale(data.forSale);\r\n        setHouseInfoReceived(true);\r\n      })\r\n    }\r\n\r\n    populateHouseInfo()\r\n\r\n  }, [houseURL]);\r\n\r\n  useEffect(() => {\r\n    loadComments(props.match.params.id)\r\n  }, [newCommentSubmitted, props.match.params.id])\r\n\r\n  const loadComments = (id) => {\r\n\r\n    let queryURL = \"/api/comments/byhouse/\" + id;\r\n    axios.get(queryURL).then( res => {\r\n      setComments(res.data)\r\n      setCommentsReceived(true)\r\n    })\r\n\r\n  }\r\n\r\n  \r\n\r\n\r\n  const renderHouseInfo = () => {\r\n    if (houseInfoReceived) {\r\n      return (\r\n        <div>\r\n\r\n        <Row>\r\n                  <Col>\r\n                    <Container>\r\n                      <Card>\r\n                        <Row>\r\n                          <Col>\r\n                            <CardImg top width=\"100%\" src={houseImageURL} alt=\"Card image cap\" />\r\n                          </Col>\r\n                          <Col>\r\n                            <CardBody>\r\n                              <CardTitle>{houseHeadline}</CardTitle>\r\n                              <CardSubtitle>{(houseForSale ? \"This property is for sale\" :  houseForRent ? \"This property is for rent\" : \"\")}</CardSubtitle>\r\n                              <CardText>{houseStreet}, {houseCity}, {houseState}, {houseZip}</CardText>\r\n                            </CardBody>\r\n                          </Col>\r\n                        </Row>\r\n                      </Card>\r\n                    </Container>\r\n                  </Col>\r\n                </Row>\r\n\r\n\r\n          <AuthContext.Consumer>\r\n            {authValue => (\r\n\r\n              <Formik\r\n                initialValues={{\r\n                  comment: \"\"\r\n                }}\r\n                validationSchema={Yup.object({\r\n                  comment: Yup.string()\r\n                    .min(1, \"Must have at least one character\")\r\n                    .required(\"Required\")\r\n                })}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                  // setTimeout(() => {\r\n                  //   alert(JSON.stringify(values, null, 2));\r\n                  //   setSubmitting(false);  \r\n                  // }, 400);\r\n\r\n                  \r\n                  let userName = authValue.authTokens.username;\r\n                  let userImage = authValue.authTokens.userImage;\r\n                  let comment  = values.comment\r\n            \r\n\r\n                  axios.post(\"/api/comments/byhouse\", {\r\n                    houseID,\r\n                    userName,\r\n                    userImage,\r\n                    comment\r\n                  })\r\n                    .then(result => {\r\n                      console.log('made it back')\r\n                      console.log(result)\r\n                      //Increate the new comment submitted state value by one to trigger a re-render of the comments \r\n                      setNewCommentSubmitted(newCommentSubmitted+1)\r\n                      //Set the value of the input field back to blank\r\n                      values.comment=''\r\n                    })\r\n\r\n                }\r\n                }\r\n              >\r\n                <Form>\r\n                  <MyTextInput\r\n                    label=\"New Comment\"\r\n                    name=\"comment\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter new comment...\"\r\n                  />\r\n\r\n                  <button type=\"submit\">Add Comment</button>\r\n                </Form>\r\n              </Formik>\r\n            )}\r\n          </AuthContext.Consumer>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const renderComments = () => {\r\n    if(commentsReceived) {\r\n\r\n      return (\r\n        comments.map(item => \r\n          <Comment \r\n          name = {item.userName} \r\n          image = {item.userImage} \r\n          text = {item.comment}\r\n          key = {item._id}\r\n          />\r\n        )\r\n      ) \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      {renderHouseInfo()}\r\n      {renderComments()}\r\n    \r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default HouseDetail;\r\n","import React from \"react\";\r\nimport axios from 'axios';\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form, useField } from \"formik\";\r\nimport '../UserProfile/userprofile.css'\r\nimport { AuthContext } from \"../../context/auth\";\r\n\r\n\r\nfunction UserProfile(props) {\r\n\r\n   //Text input for Formik form.\r\n   const MyTextInput = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <>\r\n       \r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n        <input className=\"text-input\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"error\">{meta.error}</div>\r\n        ) : null}\r\n      </>\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n    \r\n      <AuthContext.Consumer>\r\n        {authValue => (\r\n\r\n          <div>     \r\n            <h4>{`welcome ${authValue.authTokens.username}`}</h4>\r\n            <img className = \"userProfileImg\" alt=\"profile pic\" src={authValue.authTokens.userImage}></img>\r\n    \r\n\r\n            <Formik\r\n      initialValues={{\r\n        picURL: \"\",\r\n      }}\r\n      validationSchema={Yup.object({\r\n        picURL: Yup.string()\r\n          .url(\"Must enter a URL\")\r\n          .required(\"Required\")\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        // setTimeout(() => {\r\n        //   alert(JSON.stringify(values, null, 2));\r\n        //   setSubmitting(false);  \r\n        // }, 400);\r\n\r\n        let imgURL = values.picURL\r\n\r\n        axios.put(\"/api/users/\", {\r\n          user: authValue.authTokens.username,\r\n          imgURL: imgURL\r\n      })\r\n      .then(result => {\r\n          console.log('result')\r\n          console.log(result);\r\n      })\r\n\r\n      }}\r\n      >\r\n        <Form>\r\n            <MyTextInput\r\n                label=\"Change your profile picture:\"\r\n                name=\"picURL\"\r\n                type=\"text\"\r\n                placeholder=\"http://yourimagehere.com\"\r\n            />\r\n          \r\n        \r\n            <button type=\"submit\">Submit</button>\r\n            <p>You must log out and back in for your pic to change</p>\r\n        </Form>\r\n    </Formik>\r\n\r\n\r\n          </div>\r\n\r\n        )}\r\n      </AuthContext.Consumer>\r\n\r\n  \r\n  )\r\n\r\n}\r\n\r\n\r\nexport default UserProfile;","\r\nimport styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n  box-sizing: border-box;\r\n  max-width: 410px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 1rem;\r\n  border: 1px solid #999;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: linear-gradient(to bottom, #6371c7, #5563c1);\r\n  border-color: #3f4eae;\r\n  border-radius: 3px;\r\n  padding: 1rem;\r\n  color: white;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 50%;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst Error = styled.div`\r\n  background-color: red;\r\n`;\r\n\r\nexport { Form, Input, Button, Logo, Card, Error };\r\n","import React, { useState } from \"react\";\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport * as Yup from \"yup\";\r\nimport \"../styles.css\";\r\nimport \"../styles-custom.css\";\r\nimport logoImg from \"../img/walkthru.JPG\";\r\nimport { Formik, Form, useField } from \"formik\";\r\nimport { Card, Logo, Error } from '../components/AuthForm';\r\nimport { useAuth } from \"../context/auth\";\r\n\r\n\r\n\r\nfunction Login(props) {\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n    const [isError,setIsError] = useState(false)\r\n    const [errorText, setErrorText] = useState('');\r\n    const { setAuthTokens } = useAuth();\r\n    \r\n    //referer state will be used in the event that a user\r\n    //that is not yet logged in tries to log in.  The private route \r\n    //will first redirect them to the login page, but will set the referer\r\n    //state to the page they were trying to access.  After they login,\r\n    //they can then be redirected back to the page they were originally\r\n    //trying to access.\r\n    const referer = props.location.state.referer || '/';\r\n\r\n\r\n    //text input for Formik form\r\n\r\n    const MyTextInput = ({ label, ...props }) => {\r\n        // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n        // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n        const [field, meta] = useField(props);\r\n        return (\r\n          <>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <input className=\"text-input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n              <div className=\"error\">{meta.error}</div>\r\n            ) : null}\r\n          </>\r\n        );\r\n      };\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={referer} />;\r\n    }\r\n\r\n  return (\r\n    <Card>\r\n      <Logo src={logoImg} />\r\n      <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\"\r\n      }}\r\n      validationSchema={Yup.object({\r\n        email: Yup.string()\r\n          .email(\"Invalid email addresss`\")\r\n          .required(\"Required\"),\r\n        password: Yup.string()\r\n          .max(15,\"Must be 15 characters or less\")\r\n          .required(\"Required\"),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        // setTimeout(() => {\r\n        //   alert(JSON.stringify(values, null, 2));\r\n        //   setSubmitting(false);  \r\n        // }, 400);\r\n\r\n        let {email,password} = values\r\n\r\n        axios.post(\"/api/users/login\", {\r\n          email,\r\n          password\r\n      })\r\n      .then(result => {\r\n          if (result.status === 200) {\r\n          \r\n            if (result.data.error) {\r\n              setErrorText(result.data.error)\r\n              setIsError(true)\r\n            } else {\r\n\r\n              //Set the auth token along with the user data into the context\r\n              setAuthTokens(result.data)              \r\n              setLoggedIn(true);\r\n\r\n            }\r\n              \r\n            \r\n          } else {\r\n              setIsError(true);\r\n          }\r\n      }).catch(e => {\r\n          setIsError(true);\r\n      });\r\n\r\n      }}\r\n      >\r\n        <Form>\r\n            <MyTextInput\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                placeholder=\"example@gmail.com\"\r\n            />\r\n            <MyTextInput\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                type=\"text\"\r\n                placeholder=\"passsword\"\r\n            />\r\n        \r\n            <button type=\"submit\">Submit</button>\r\n        </Form>\r\n    </Formik>\r\n\r\n      <Link to=\"/signup\">Don't have an account?</Link>\r\n        { isError &&<Error>{errorText}</Error>}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Login;","import React, { useState } from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport * as Yup from \"yup\";\r\n// import styled from \"@emotion/styled\";\r\nimport \"../styles.css\";\r\nimport \"../styles-custom.css\";\r\nimport logoImg from \"../img/walkthru.JPG\";\r\nimport { Formik, Form, useField } from \"formik\";\r\nimport { Card, Logo, Error } from '../components/AuthForm';\r\nimport { useAuth } from \"../context/auth\";\r\n\r\nfunction Signup(props) {\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n    const [isError,setIsError] = useState(false);\r\n    const [errorText, setErrorText] = useState('');\r\n    const { setAuthTokens } = useAuth();\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/landing\" />;\r\n    }\r\n\r\n\r\n    //text input for Formik form\r\n\r\n    const MyTextInput = ({ label, ...props }) => {\r\n        // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n        // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n        const [field, meta] = useField(props);\r\n        return (\r\n          <>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <input className=\"text-input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n              <div className=\"error\">{meta.error}</div>\r\n            ) : null}\r\n          </>\r\n        );\r\n      };\r\n\r\n\r\n  return (\r\n    <Card>\r\n      <Logo src={logoImg} />\r\n      <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n        repassword: \"\"\r\n      }}\r\n      validationSchema={Yup.object({\r\n        username: Yup.string()\r\n        .max(15,\"Must be 15 characters or less\")\r\n        .required(\"Required\"),\r\n        email: Yup.string()\r\n          .email(\"Invalid email addresss`\")\r\n          .required(\"Required\"),\r\n        password: Yup.string()\r\n          .max(15,\"Must be 15 characters or less\")\r\n          .required(\"Required\"),\r\n        repassword: Yup.string()\r\n          .max(15,\"Must be 15 characters or less\")\r\n          .required(\"Required\"),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        // setTimeout(() => {\r\n        //   alert(JSON.stringify(values, null, 2));\r\n        //   setSubmitting(false);  \r\n        // }, 400);\r\n         setErrorText();\r\n        \r\n        \r\n        let {username,email,password,repassword} = values\r\n\r\n        //If the two passwords do not match, throw the mismatch error.\r\n        if(password !== repassword) {\r\n            setErrorText('The two passwords entered are not the same;');\r\n            setIsError(true);\r\n        } else {\r\n\r\n        axios.post(\"/api/users/register\", {\r\n          username,\r\n          email,\r\n          password\r\n      })\r\n      .then(result => {\r\n          if (result.status === 200) {\r\n              if(result.data.error) {\r\n                  \r\n                  setErrorText(result.data.error)\r\n                  setIsError(true);\r\n              } else {\r\n\r\n                setAuthTokens(result.data)\r\n                 setLoggedIn(true);\r\n              }\r\n                 \r\n          } else {\r\n              setIsError(true);\r\n          }\r\n      }).catch(e => {\r\n          setIsError(true);\r\n      });\r\n        }\r\n      }}\r\n      \r\n      \r\n      >\r\n      <Form>\r\n            <MyTextInput\r\n                label=\"User Name\"\r\n                name=\"username\"\r\n                type=\"text\"\r\n                placeholder=\"user name\"\r\n            />\r\n            <MyTextInput\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                placeholder=\"example@gmail.com\"\r\n            />\r\n            <MyTextInput\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                type=\"text\"\r\n                placeholder=\"password\"\r\n            />\r\n            <MyTextInput\r\n                label=\"Password Again\"\r\n                name=\"repassword\"\r\n                type=\"text\"\r\n                placeholder=\"password again\"\r\n            />\r\n\r\n            <button type=\"submit\">Submit</button>\r\n      </Form>\r\n      </Formik>\r\n        {/* { mismatchError &&<Error>The two password fields must be the same!</Error>} */}\r\n        { isError &&<Error>{errorText}</Error>}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Signup;","import React, { useState } from 'react';\r\nimport {  Link } from \"react-router-dom\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  NavbarText\r\n} from 'reactstrap';\r\n\r\nconst NavbarPage = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">walkthru</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink tag={Link} to=\"/\" className=\"text-info\">Home</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink tag={Link} to=\"/Landing\" className=\"text-info\">Landing</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink tag={Link} to=\"/User\" className=\"text-info\">Your Profile</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <button onClick={props.logOut}>Log Out</button>\r\n              {/* <NavLink tag={Link} to=\"/Login\" className=\"text-info\">Sign Out</NavLink> */}\r\n            </NavItem>\r\n          </Nav>\r\n          <NavbarText>walkthru-ers are saying...</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavbarPage;","import React from 'react';\r\nimport { Formik, Form, useField } from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport { Card, Logo } from '../components/AuthForm';\r\nimport logoImg from \"../img/walkthru.JPG\";\r\nimport \"../styles.css\";\r\nimport \"../styles-custom.css\";\r\n\r\n\r\nconst NewHouseForm = () => {\r\n\r\n    const MyTextInput = ({ label, ...props }) => {\r\n        // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n        // which we can spread on <input> and also replace ErrorMessage entirely.\r\n        const [field, meta] = useField(props);\r\n        return (\r\n            <>\r\n                <label htmlFor={props.id || props.name}>{label}</label>\r\n                <input className=\"text-input\" {...field} {...props} />\r\n                {meta.touched && meta.error ? (\r\n                    <div className=\"error\"> {meta.error} </div>\r\n                ) : null}\r\n            </>\r\n        );\r\n    };\r\n    return (\r\n        <Card>\r\n            <Logo src={logoImg} />\r\n            <h1>Create a new house/property!</h1>\r\n            <Formik\r\n                initialValues={{ street: \"\", city: \"\", st: \"\", zip: \"\" }}\r\n                validationSchema={Yup.object({\r\n                    street: Yup.string()\r\n                        .min(1, 'Street Address must not be blank.')\r\n                        .required('Required'),\r\n                    city: Yup.string()\r\n                        .min(1, \"City must not be blank.\")\r\n                        .required('Required'),\r\n                    st: Yup.string()\r\n                        .max(2, \"Please use the states abbreviation.\")\r\n                        .required('Required'),\r\n                    ZIP: Yup.string()\r\n                        .min(5, \"Zip Must be 5 digits.\")\r\n                        .max(5, \"Zip Must be 5 digits.\")\r\n                        .required('Required'),\r\n                })}\r\n                onSubmit={(values, { setSubmitting }) => { }\r\n                }\r\n            >\r\n                <Form>\r\n                    <MyTextInput\r\n                        label=\"Street\"\r\n                        name=\"street\"\r\n                        type=\"text\"\r\n                        placeholder=\"Street Address\"\r\n                    />\r\n                    <MyTextInput\r\n                        label=\"City\"\r\n                        name=\"city\"\r\n                        type=\"text\"\r\n                        placeholder=\"City\"\r\n                    />\r\n                    {/* Option drop down menu for the State field */}\r\n                    {/* <MySelect label=\"State\" name=\"st\">\r\n                        <option value=\"\">Select a State</option>\r\n                        <option value=\"AK\">AK</option>\r\n                        <option value=\"AR\">AR</option>\r\n                        <option value=\"AZ\">AZ</option>\r\n                        <option value=\"CA\">CA</option>\r\n                    </MySelect> */}\r\n                    <MyTextInput\r\n                        label=\"St\"\r\n                        name=\"st\"\r\n                        type=\"text\"\r\n                        placeholder=\"St\"\r\n                    />\r\n                    <MyTextInput\r\n                        label=\"zip\"\r\n                        name=\"zip\"\r\n                        type=\"number\"\r\n                        placeholder=\"Zip\"\r\n                    />\r\n                    <button type=\"submit\">Submit</button>\r\n                </Form>\r\n            </Formik>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NewHouseForm;\r\n","\r\nimport React from \"react\";\r\n\r\nfunction NoMatch() {\r\n  return (\r\n    <div>\r\n            <h1>404 Page Not Found</h1>\r\n            <h1>\r\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n                🙄\r\n              </span>\r\n            </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NoMatch;","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from './PrivateRoute';\r\nimport Home from './pages/Home';\r\nimport Landing from './pages/Landing/Landing';\r\nimport HouseDetail from './pages/HouseDetail/HouseDetail';\r\nimport UserProfile from './pages/UserProfile/UserProfile';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport NavbarComponent from \"./pages/Navbar/Navbar\"\r\n\r\nimport NewHouseForm from './pages/NewHouseForm';\r\n\r\n\r\nimport NoMatch from './pages/NoMatch';\r\nimport { AuthContext } from \"./context/auth\";\r\n\r\n\r\nfunction App(props) {\r\n  //Hook with use states for any component using the AuthContext to be\r\n  //able to get and set tokens\r\n  const [authTokens, setAuthTokens] = useState(localStorage.getItem('authTokens' || ''))\r\n\r\n  const setTokens = (data) => {\r\n    localStorage.setItem(\"tokens\", JSON.stringify(data));\r\n    setAuthTokens(data);\r\n  }\r\n\r\n  \r\n  const logOut = () => {\r\n    setAuthTokens();\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\r\n      <Router>\r\n        <div>\r\n          {/* <ul>\r\n            <li>\r\n              <Link to=\"/\">Home Page</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/landing\">Landing Page</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/NewHouseForm\">Add House Form/Page Mockup</Link>\r\n            </li>\r\n      \r\n          </ul> */}\r\n          <NavbarComponent logOut={logOut}/>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/signup\" component={Signup} />\r\n            <PrivateRoute path=\"/api/houses/:id\" component={HouseDetail} /* Change back to PrivateRoute *//>\r\n            <PrivateRoute path=\"/user\" component={UserProfile} /* Change back to PrivateRoute *//>\r\n            <PrivateRoute path=\"/landing\" component={Landing} /* Change back to PrivateRoute *//>\r\n            <PrivateRoute path=\"/newHouseForm\" component={NewHouseForm} /* Change back to PrivateRoute *//>\r\n            <Route component={NoMatch} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/walkthru.02c03c6a.JPG\";"],"sourceRoot":""}